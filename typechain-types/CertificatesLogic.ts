/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace CertificatesLogic {
  export type CertificateDescriptionStruct = {
    courseName: string;
    beginningDate: string;
    receivingDate: string;
    score: string;
    info: string;
  };

  export type CertificateDescriptionStructOutput = [
    string,
    string,
    string,
    string,
    string
  ] & {
    courseName: string;
    beginningDate: string;
    receivingDate: string;
    score: string;
    info: string;
  };
}

export interface CertificatesLogicInterface extends utils.Interface {
  contractName: "CertificatesLogic";
  functions: {
    "addDescription(address,string,string,string,string,string)": FunctionFragment;
    "addLearner(address,string)": FunctionFragment;
    "certificatesId(address,string)": FunctionFragment;
    "certificatesInfo(address)": FunctionFragment;
    "courses(string)": FunctionFragment;
    "coursesList(uint256)": FunctionFragment;
    "createCertificate(address,string,string)": FunctionFragment;
    "createCourse(string)": FunctionFragment;
    "getCertificateInfo(address)": FunctionFragment;
    "isOnCourse(address,string)": FunctionFragment;
    "learners(address,string)": FunctionFragment;
    "learnersList(string,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "removeLearner(address,string)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "symbol()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "viewCertificateId(address,string)": FunctionFragment;
    "viewCertificateURI(address,string)": FunctionFragment;
    "viewCourses()": FunctionFragment;
    "viewLearners(string)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addDescription",
    values: [string, string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addLearner",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "certificatesId",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "certificatesInfo",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "courses", values: [string]): string;
  encodeFunctionData(
    functionFragment: "coursesList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createCertificate",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createCourse",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCertificateInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isOnCourse",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "learners",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "learnersList",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeLearner",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "viewCertificateId",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "viewCertificateURI",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "viewCourses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "viewLearners",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addDescription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addLearner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "certificatesId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "certificatesInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "courses", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "coursesList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCertificate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCourse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCertificateInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOnCourse", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "learners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "learnersList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeLearner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewCertificateId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewCertificateURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewCourses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewLearners",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface CertificatesLogic extends BaseContract {
  contractName: "CertificatesLogic";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CertificatesLogicInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addDescription(
      _account: string,
      _courseName: string,
      _beginningDate: string,
      _receivingDate: string,
      _score: string,
      _info: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addLearner(
      _account: string,
      _courseName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    certificatesId(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    certificatesInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string] & {
        courseName: string;
        beginningDate: string;
        receivingDate: string;
        score: string;
        info: string;
      }
    >;

    courses(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    coursesList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    createCertificate(
      _account: string,
      _courseName: string,
      _tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createCourse(
      _courseName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCertificateInfo(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[CertificatesLogic.CertificateDescriptionStructOutput]>;

    isOnCourse(
      _account: string,
      _courseName: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    learners(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    learnersList(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeLearner(
      _account: string,
      _courseName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    viewCertificateId(
      _account: string,
      _courseName: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    viewCertificateURI(
      _account: string,
      _courseName: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    viewCourses(overrides?: CallOverrides): Promise<[string[]]>;

    viewLearners(
      _courseName: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;
  };

  addDescription(
    _account: string,
    _courseName: string,
    _beginningDate: string,
    _receivingDate: string,
    _score: string,
    _info: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addLearner(
    _account: string,
    _courseName: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  certificatesId(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  certificatesInfo(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, string] & {
      courseName: string;
      beginningDate: string;
      receivingDate: string;
      score: string;
      info: string;
    }
  >;

  courses(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  coursesList(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  createCertificate(
    _account: string,
    _courseName: string,
    _tokenURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createCourse(
    _courseName: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCertificateInfo(
    _account: string,
    overrides?: CallOverrides
  ): Promise<CertificatesLogic.CertificateDescriptionStructOutput>;

  isOnCourse(
    _account: string,
    _courseName: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  learners(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  learnersList(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeLearner(
    _account: string,
    _courseName: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  viewCertificateId(
    _account: string,
    _courseName: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  viewCertificateURI(
    _account: string,
    _courseName: string,
    overrides?: CallOverrides
  ): Promise<string>;

  viewCourses(overrides?: CallOverrides): Promise<string[]>;

  viewLearners(
    _courseName: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  callStatic: {
    addDescription(
      _account: string,
      _courseName: string,
      _beginningDate: string,
      _receivingDate: string,
      _score: string,
      _info: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addLearner(
      _account: string,
      _courseName: string,
      overrides?: CallOverrides
    ): Promise<void>;

    certificatesId(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    certificatesInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string] & {
        courseName: string;
        beginningDate: string;
        receivingDate: string;
        score: string;
        info: string;
      }
    >;

    courses(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    coursesList(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    createCertificate(
      _account: string,
      _courseName: string,
      _tokenURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    createCourse(_courseName: string, overrides?: CallOverrides): Promise<void>;

    getCertificateInfo(
      _account: string,
      overrides?: CallOverrides
    ): Promise<CertificatesLogic.CertificateDescriptionStructOutput>;

    isOnCourse(
      _account: string,
      _courseName: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    learners(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    learnersList(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeLearner(
      _account: string,
      _courseName: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    viewCertificateId(
      _account: string,
      _courseName: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    viewCertificateURI(
      _account: string,
      _courseName: string,
      overrides?: CallOverrides
    ): Promise<string>;

    viewCourses(overrides?: CallOverrides): Promise<string[]>;

    viewLearners(
      _courseName: string,
      overrides?: CallOverrides
    ): Promise<string[]>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    addDescription(
      _account: string,
      _courseName: string,
      _beginningDate: string,
      _receivingDate: string,
      _score: string,
      _info: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addLearner(
      _account: string,
      _courseName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    certificatesId(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    certificatesInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    courses(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    coursesList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createCertificate(
      _account: string,
      _courseName: string,
      _tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createCourse(
      _courseName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCertificateInfo(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOnCourse(
      _account: string,
      _courseName: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    learners(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    learnersList(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeLearner(
      _account: string,
      _courseName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    viewCertificateId(
      _account: string,
      _courseName: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    viewCertificateURI(
      _account: string,
      _courseName: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    viewCourses(overrides?: CallOverrides): Promise<BigNumber>;

    viewLearners(
      _courseName: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addDescription(
      _account: string,
      _courseName: string,
      _beginningDate: string,
      _receivingDate: string,
      _score: string,
      _info: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addLearner(
      _account: string,
      _courseName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    certificatesId(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    certificatesInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    courses(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    coursesList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createCertificate(
      _account: string,
      _courseName: string,
      _tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createCourse(
      _courseName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCertificateInfo(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOnCourse(
      _account: string,
      _courseName: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    learners(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    learnersList(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeLearner(
      _account: string,
      _courseName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    viewCertificateId(
      _account: string,
      _courseName: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    viewCertificateURI(
      _account: string,
      _courseName: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    viewCourses(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    viewLearners(
      _courseName: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
